[project]
name = "scryfall-mcp"
version = "0.1.0"
description = "Scryfall MCP Server - Magic: The Gathering card information via MCP protocol"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "httpx>=0.25.0",
    "redis>=4.5.0",
    "fastmcp>=0.6.0",
    "typing-extensions>=4.8.0",
]

[project.scripts]
scryfall-mcp = "scryfall_mcp:sync_main"

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.black]
target-version = ['py311']
line-length = 88

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "Q",     # flake8-quotes
    "SIM",   # flake8-simplify
    "TRY",   # tryceratops
    "N",     # pep8-naming
    "ANN",   # flake8-annotations
    "PLR",   # pylint refactor
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TCH",   # flake8-type-checking
]
ignore = [
    "ANN401", # any-type
    "E501",   # line-too-long (handled by formatter)
    "TRY003", # raise-vanilla-args
    "PLR0913", # too-many-arguments
    "PLR2004", # magic-value-used-in-comparison
    "T201",   # print statements (allowed in test scripts)
    "T203",   # pprint statements
    "ANN204", # missing return type for __init__
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
